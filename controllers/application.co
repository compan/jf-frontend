angular.module('jf')
.controller 'ApplicationCtrl', !($scope, CONFIG, Authorization, Authentication, Session, $location, AjaxAction, Spinner,ConnectionChecker)->

	if CONFIG.debug
		window.appScope = $scope
		window.CONFIG = CONFIG

	# wire CONFIG to application scope
	$scope.CONFIG = CONFIG

	CONFIG.spinner?.delay = CONFIG.common.spinnerDelay

	spinner = Spinner('spinner', CONFIG.spinner)

	$scope.currentUser = null
	$scope.setPendingRequest = !(pendingRequest)->
		console.log("setPendingRequest ->", pendingRequest)
		if pendingRequest
			spinner.start()
		else
			spinner.stop()

	# wire $scope to Session
	Session.applicationScope = $scope

	$scope.$on "$locationChangeStart", handleLocationChange

	function handleLocationChange(event, next, previous)

		console.log "next ------>", next
		nextPath = resolveNextPath(event,next)

		if not nextPath.match(CONFIG.common.loginPath )
		# if not Authorization.isAuthorized $scope.currentUser, nextPath
		# 	# event.preventDefault!
		# 	$location.path CONFIG.common.loginPath

			if CONFIG.common.keepPreviousPath
				console.log "previous <-----", previous
				Session.previousUrl = previous

			Authorization.isAuthorized nextPath, (isAuthorized)->
				console.log "isAuthorized", isAuthorized, nextPath
				if not isAuthorized
					if CONFIG.common.ssoLoginUrl
						window.location.href = CONFIG.common.ssoLoginUrl
					else
						console.log "redirect --> "+CONFIG.common.loginPath+"?redirectPath="+nextPath
						$location.path(CONFIG.common.loginPath).search {redirectPath: encodeURIComponent(nextPath)}


	function resolveNextPath(event,next)
		if typeof next === 'string'
			return new URI(next).resource()

		if next.url
			nextPath = new URI(next.url).resource()

		throw "Cannot parse next path to url"

	# $scope.$on "$locationChangeSuccess", !(event, next)->
	# 	if redirect.length > 0
			# $route.current = CONFIG.common.loginPath
	# 		$location.path redirect.pop!




	if CONFIG.connectionChecker?.enabled
		ConnectionChecker.start()

		Events.on "connectionChecker:fail", ->
			console.log "APP failed to connect to backend"
			Events.emit "alerts:error", CONFIG.text.cannotConnectToBackend

		Events.on "connectionChecker:ok", ->
			console.log "APP reconnected to backend"
			Events.emit "alerts:message", CONFIG.text.connectedToBackendSuccessfully


	# authentication
	Authentication.discoverLoginState!